//go:cgo_ldflag "-L/Volumes/2T/compile/lede/staging_dir/toolchain-x86_64_gcc-11.3.0_musl/usr/lib"
//go:cgo_ldflag "-L/Volumes/2T/compile/lede/staging_dir/toolchain-x86_64_gcc-11.3.0_musl/lib"
//go:cgo_ldflag "-znow"
//go:cgo_ldflag "-zrelro"
// Code generated by cmd/cgo; DO NOT EDIT.

package btrfs

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype___le16 = _Ctype___u16

type _Ctype___le32 = _Ctype___u32

type _Ctype___le64 = _Ctype___u64

type _Ctype___s64 = _Ctype_longlong

type _Ctype___u16 = _Ctype_ushort

type _Ctype___u32 = _Ctype_uint

type _Ctype___u64 = _Ctype_ulonglong

type _Ctype___u8 = _Ctype_uchar

type _Ctype_char int8

type _Ctype_longlong int64

type _Ctype_struct_btrfs_disk_key struct {
	objectid	_Ctype___le64
	_type		_Ctype___u8
	_		[8]byte
}

type _Ctype_struct_btrfs_inode_item struct {
	generation	_Ctype___le64
	transid		_Ctype___le64
	size		_Ctype___le64
	nbytes		_Ctype___le64
	block_group	_Ctype___le64
	nlink		_Ctype___le32
	uid		_Ctype___le32
	gid		_Ctype___le32
	mode		_Ctype___le32
	rdev		_Ctype___le64
	flags		_Ctype___le64
	sequence	_Ctype___le64
	reserved	[4]_Ctype___le64
	atime		_Ctype_struct_btrfs_timespec
	_		[8]byte
	mtime		_Ctype_struct_btrfs_timespec
	_		[12]byte
}

type _Ctype_struct_btrfs_ioctl_ino_lookup_args struct {
	treeid		_Ctype___u64
	objectid	_Ctype___u64
	name		[4080]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_search_args struct {
	key	_Ctype_struct_btrfs_ioctl_search_key
	buf	[3992]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_search_header struct {
	transid		_Ctype___u64
	objectid	_Ctype___u64
	offset		_Ctype___u64
	_type		_Ctype___u32
	len		_Ctype___u32
}

type _Ctype_struct_btrfs_ioctl_search_key struct {
	tree_id		_Ctype___u64
	min_objectid	_Ctype___u64
	max_objectid	_Ctype___u64
	min_offset	_Ctype___u64
	max_offset	_Ctype___u64
	min_transid	_Ctype___u64
	max_transid	_Ctype___u64
	min_type	_Ctype___u32
	max_type	_Ctype___u32
	nr_items	_Ctype___u32
	unused		_Ctype___u32
	unused1		_Ctype___u64
	unused2		_Ctype___u64
	unused3		_Ctype___u64
	unused4		_Ctype___u64
}

type _Ctype_struct_btrfs_ioctl_vol_args struct {
	fd	_Ctype___s64
	name	[4088]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_vol_args_v2 struct {
	fd	_Ctype___s64
	transid	_Ctype___u64
	flags	_Ctype___u64
	anon0	[32]byte
	anon1	[4040]byte
}

type _Ctype_struct_btrfs_root_item struct {
	inode		_Ctype_struct_btrfs_inode_item
	generation	_Ctype___le64
	root_dirid	_Ctype___le64
	bytenr		_Ctype___le64
	byte_limit	_Ctype___le64
	bytes_used	_Ctype___le64
	last_snapshot	_Ctype___le64
	flags		_Ctype___le64
	refs		_Ctype___le32
	_		[17]byte
	drop_level	_Ctype___u8
	level		_Ctype___u8
	_		[8]byte
	uuid		[16]_Ctype___u8
	parent_uuid	[16]_Ctype___u8
	received_uuid	[16]_Ctype___u8
	_		[144]byte
}

type _Ctype_struct_btrfs_root_ref struct {
	dirid		_Ctype___le64
	sequence	_Ctype___le64
	name_len	_Ctype___le16
}

type _Ctype_struct_btrfs_timespec struct {
	sec	_Ctype___le64
	nsec	_Ctype___le32
}

type _Ctype_struct_gosafe_btrfs_root_item struct {
	uuid		[16]_Ctype___u8
	parent_uuid	[16]_Ctype___u8
	received_uuid	[16]_Ctype___u8
	generation	_Ctype___le64
	otransid	_Ctype___le64
	flags		_Ctype___le64
}

type _Ctype_uchar uint8

type _Ctype_uint uint32

type _Ctype_ulong uint64

type _Ctype_ulonglong uint64

type _Ctype_union___0 = [32]byte

type _Ctype_union___1 = [4040]byte

type _Ctype_ushort uint16

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
const _Ciconst_BTRFS_FIRST_FREE_OBJECTID = 0x100
const _Ciconst_BTRFS_FS_TREE_OBJECTID = 0x5
const _Ciconst_BTRFS_IOC_INO_LOOKUP = 0xd0009412
const _Ciconst_BTRFS_IOC_SNAP_CREATE_V2 = 0x50009417
const _Ciconst_BTRFS_IOC_SNAP_DESTROY = 0x5000940f
const _Ciconst_BTRFS_IOC_SUBVOL_CREATE = 0x5000940e
const _Ciconst_BTRFS_IOC_TREE_SEARCH = 0xd0009411
const _Ciconst_BTRFS_LAST_FREE_OBJECTID = 0xffffffffffffff00
const _Ciconst_BTRFS_PATH_NAME_MAX = 0xff7
const _Ciconst_BTRFS_ROOT_BACKREF_KEY = 0x90
const _Ciconst_BTRFS_ROOT_ITEM_KEY = 0x84
const _Ciconst_BTRFS_ROOT_SUBVOL_RDONLY = 0x1
const _Ciconst_BTRFS_ROOT_TREE_OBJECTID = 0x1
const _Ciconst_BTRFS_SEARCH_ARGS_BUFSIZE = 0xf98
const _Ciconst_BTRFS_SUBVOL_NAME_MAX = 0xfc7
const _Ciconst_BTRFS_SUBVOL_RDONLY = 0x2
const _Ciconst_BTRFS_SUPER_MAGIC = 0x9123683e
const _Ciconst_BTRFS_UUID_SIZE = 0x10
const _Ciconst_sizeof_struct_btrfs_root_ref = 0x12

//go:cgo_import_static _cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2
//go:linkname __cgofn__cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2 _cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2
var __cgofn__cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2 byte
var _cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2 = unsafe.Pointer(&__cgofn__cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2)

//go:cgo_unsafe_args
func _Cfunc_get_name_btrfs_ioctl_vol_args_v2(p0 *_Ctype_struct_btrfs_ioctl_vol_args_v2) (r1 *_Ctype_char) {
	_cgo_runtime_cgocall(_cgo_7c80a237ed2f_Cfunc_get_name_btrfs_ioctl_vol_args_v2, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_7c80a237ed2f_Cfunc_unpack_root_item
//go:linkname __cgofn__cgo_7c80a237ed2f_Cfunc_unpack_root_item _cgo_7c80a237ed2f_Cfunc_unpack_root_item
var __cgofn__cgo_7c80a237ed2f_Cfunc_unpack_root_item byte
var _cgo_7c80a237ed2f_Cfunc_unpack_root_item = unsafe.Pointer(&__cgofn__cgo_7c80a237ed2f_Cfunc_unpack_root_item)

//go:cgo_unsafe_args
func _Cfunc_unpack_root_item(p0 *_Ctype_struct_gosafe_btrfs_root_item, p1 *_Ctype_struct_btrfs_root_item) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_7c80a237ed2f_Cfunc_unpack_root_item, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
