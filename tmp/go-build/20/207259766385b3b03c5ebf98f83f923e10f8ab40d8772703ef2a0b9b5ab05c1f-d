//go:cgo_ldflag "-L/Volumes/2T/compile/lede/staging_dir/toolchain-x86_64_gcc-11.3.0_musl/usr/lib"
//go:cgo_ldflag "-L/Volumes/2T/compile/lede/staging_dir/toolchain-x86_64_gcc-11.3.0_musl/lib"
//go:cgo_ldflag "-znow"
//go:cgo_ldflag "-zrelro"
// Code generated by cmd/cgo; DO NOT EDIT.

package btrfs

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_DIR = _Ctype_struct___dirstream

type _Ctype__GoString_ string

type _Ctype___s64 = _Ctype_longlong

type _Ctype___u32 = _Ctype_uint

type _Ctype___u64 = _Ctype_ulonglong

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_longlong int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_struct___dirstream _cgopackage.Incomplete

type _Ctype_struct_btrfs_ioctl_ino_lookup_args struct {
	treeid		_Ctype___u64
	objectid	_Ctype___u64
	name		[4080]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_qgroup_create_args struct {
	create		_Ctype___u64
	qgroupid	_Ctype___u64
}

type _Ctype_struct_btrfs_ioctl_qgroup_limit_args struct {
	qgroupid	_Ctype___u64
	lim		_Ctype_struct_btrfs_qgroup_limit
}

type _Ctype_struct_btrfs_ioctl_quota_ctl_args struct {
	cmd	_Ctype___u64
	status	_Ctype___u64
}

type _Ctype_struct_btrfs_ioctl_quota_rescan_args struct {
	flags		_Ctype___u64
	progress	_Ctype___u64
	reserved	[6]_Ctype___u64
}

type _Ctype_struct_btrfs_ioctl_search_args struct {
	key	_Ctype_struct_btrfs_ioctl_search_key
	buf	[3992]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_search_header struct {
	transid		_Ctype___u64
	objectid	_Ctype___u64
	offset		_Ctype___u64
	_type		_Ctype___u32
	len		_Ctype___u32
}

type _Ctype_struct_btrfs_ioctl_search_key struct {
	tree_id		_Ctype___u64
	min_objectid	_Ctype___u64
	max_objectid	_Ctype___u64
	min_offset	_Ctype___u64
	max_offset	_Ctype___u64
	min_transid	_Ctype___u64
	max_transid	_Ctype___u64
	min_type	_Ctype___u32
	max_type	_Ctype___u32
	nr_items	_Ctype___u32
	unused		_Ctype___u32
	unused1		_Ctype___u64
	unused2		_Ctype___u64
	unused3		_Ctype___u64
	unused4		_Ctype___u64
}

type _Ctype_struct_btrfs_ioctl_vol_args struct {
	fd	_Ctype___s64
	name	[4088]_Ctype_char
}

type _Ctype_struct_btrfs_ioctl_vol_args_v2 struct {
	fd	_Ctype___s64
	transid	_Ctype___u64
	flags	_Ctype___u64
	anon0	[32]byte
	anon1	[4040]byte
}

type _Ctype_struct_btrfs_qgroup_limit struct {
	flags		_Ctype___u64
	max_rfer	_Ctype___u64
	max_excl	_Ctype___u64
	rsv_rfer	_Ctype___u64
	rsv_excl	_Ctype___u64
}

type _Ctype_uint uint32

type _Ctype_ulong uint64

type _Ctype_ulonglong uint64

type _Ctype_union___0 = [32]byte

type _Ctype_union___1 = [4040]byte

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
const _Ciconst_BTRFS_FIRST_FREE_OBJECTID = 0x100
const _Ciconst_BTRFS_IOC_INO_LOOKUP = 0xd0009412
const _Ciconst_BTRFS_IOC_QGROUP_CREATE = 0x4010942a
const _Ciconst_BTRFS_IOC_QGROUP_LIMIT = 0x8030942b
const _Ciconst_BTRFS_IOC_QUOTA_CTL = 0xc0109428
const _Ciconst_BTRFS_IOC_QUOTA_RESCAN_WAIT = 0x942e
const _Ciconst_BTRFS_IOC_SNAP_CREATE_V2 = 0x50009417
const _Ciconst_BTRFS_IOC_SNAP_DESTROY = 0x5000940f
const _Ciconst_BTRFS_IOC_SUBVOL_CREATE = 0x5000940e
const _Ciconst_BTRFS_IOC_TREE_SEARCH = 0xd0009411
const _Ciconst_BTRFS_QGROUP_LIMIT_MAX_RFER = 0x1
const _Ciconst_BTRFS_QGROUP_STATUS_KEY = 0xf0
const _Ciconst_BTRFS_QUOTA_CTL_ENABLE = 0x1
const _Ciconst_BTRFS_QUOTA_TREE_OBJECTID = 0x8


// CString converts the Go string s to a C string.
//
// The C string is allocated in the C heap using malloc.
// It is the caller's responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func _Cfunc_CString(s string) *_Ctype_char {
	if len(s)+1 <= 0 {
		panic("string too large")
	}
	p := _cgo_cmalloc(uint64(len(s)+1))
	sliceHeader := struct {
		p   unsafe.Pointer
		len int
		cap int
	}{p, len(s)+1, len(s)+1}
	b := *(*[]byte)(unsafe.Pointer(&sliceHeader))
	copy(b, s)
	b[len(s)] = 0
	return (*_Ctype_char)(p)
}
//go:cgo_import_static _cgo_2e2b68c63284_Cfunc_closedir
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc_closedir _cgo_2e2b68c63284_Cfunc_closedir
var __cgofn__cgo_2e2b68c63284_Cfunc_closedir byte
var _cgo_2e2b68c63284_Cfunc_closedir = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc_closedir)

//go:cgo_unsafe_args
func _Cfunc_closedir(p0 *_Ctype_struct___dirstream) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc_closedir, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2e2b68c63284_Cfunc_dirfd
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc_dirfd _cgo_2e2b68c63284_Cfunc_dirfd
var __cgofn__cgo_2e2b68c63284_Cfunc_dirfd byte
var _cgo_2e2b68c63284_Cfunc_dirfd = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc_dirfd)

//go:cgo_unsafe_args
func _Cfunc_dirfd(p0 *_Ctype_struct___dirstream) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc_dirfd, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2e2b68c63284_Cfunc_free
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc_free _cgo_2e2b68c63284_Cfunc_free
var __cgofn__cgo_2e2b68c63284_Cfunc_free byte
var _cgo_2e2b68c63284_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2e2b68c63284_Cfunc_opendir
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc_opendir _cgo_2e2b68c63284_Cfunc_opendir
var __cgofn__cgo_2e2b68c63284_Cfunc_opendir byte
var _cgo_2e2b68c63284_Cfunc_opendir = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc_opendir)

//go:cgo_unsafe_args
func _Cfunc_opendir(p0 *_Ctype_char) (r1 *_Ctype_struct___dirstream) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc_opendir, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2 _cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2
var __cgofn__cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2 byte
var _cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2 = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2)

//go:cgo_unsafe_args
func _Cfunc_set_name_btrfs_ioctl_vol_args_v2(p0 *_Ctype_struct_btrfs_ioctl_vol_args_v2, p1 *_Ctype_char) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc_set_name_btrfs_ioctl_vol_args_v2, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}

//go:cgo_import_static _cgo_2e2b68c63284_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_2e2b68c63284_Cfunc__Cmalloc _cgo_2e2b68c63284_Cfunc__Cmalloc
var __cgofn__cgo_2e2b68c63284_Cfunc__Cmalloc byte
var _cgo_2e2b68c63284_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_2e2b68c63284_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_2e2b68c63284_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
